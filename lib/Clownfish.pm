use strict;
use warnings;

package Clownfish;
our $VERSION = '0.01';

1;

=head1 NAME

Clownfish - Bolt OO functionality onto C.

=head1 PRIVATE API

Clownfish is an implementation detail.  This documentation is partial --
enough for the curious hacker, but not a full API.

=head1 DESCRIPTION

=head2 Overview.

Clownfish is a small language for describing an object oriented interface,
and a compiler which generates some "boilerplate" code allowing that interface
to be used from C.

=head2 Object Model

=over

=item * Single inheritance.

=item * Method dispatch using virtual tables.

=back

=head2 Method invocation syntax.

Methods are differentiated from functions via capitalization:
Dog_say_hello is a function, Dog_Say_Hello is a method.

    /* Implementing function, in Dog/Chihuahua.c */
    void
    Chihuahua_say_hello(Chihuahua *self) 
    {
        printf("Yap! Yap! Yap!\n");
        Dog_Wag_Tail(self);
    }
    
    /* Implementing function, in Dog/SaintBernard.c. */
    void
    StBernard_say_hello(SaintBernard *self)
    {
        printf("Rooorf! Rooorf!\n");
        Dog_Wag_Tail(self);
    }
    
    /* Invoke Say_Hello method for several Dog objects. */
    void
    DogPack_greet(DogPack *self)
    {
        u32_t i;
        for (i = 0; i < self->pack_size; i++) {
            Dog_Say_Hello(self->pack_members[i]);
        }
    }

=head2 Class declaration syntax

    [final] [inert] class CLASSNAME [cnick CNICK] 
        [extends PARENT] [ : ATTRIBUTE ]* {
    
        [declarations]
    
    }

Example:

    class Dog::SaintBernard cnick StBernard extends Dog {
        
        public inert incremented SaintBernard*
        new();
        
        void 
        Say_Hello(SaintBernard *self);
    }

=over

=item * B<CLASSNAME> - The name of this class.  The last string of characters
will be used as the object's C struct name.

=item * B<CNICK> - A recognizable abbreviation of the class name, used as a
prefix for every function and method.

=item * B<PARENT> - The full name of the parent class.

=item * B<ATTRIBUTE> - An arbitrary attribute, e.g. "dumpable", or perhaps
"serializable".  A class may have multiple attributes, each preceded by a
colon.

=back

=head2 Memory management

At present, memory is managed via a reference counting scheme, but this is not
inherently part of Clownfish.

=head2 Namespaces, parcels, prefixes, and "short names"

There are two levels of namespacing in Clownfish: parcels and classes.

Clownfish classes intended to be published as a single unit may be grouped
together using a "parcel" (akin to a "package" in Java).  Parcel directives
need to go at the top of each class file.

    parcel Crustacean cnick Crust;

All symbols generated by Clownfish for classes within a parcel will be
prefixed by varying capitalizations of the parcel's C-nickname or "cnick" in
order to avoid namespace collisions with other projects.

Within a parcel, the last part of each class name must be unique.

    class Crustacean::Lobster::Claw { ... }
    class Crustacean::Crab::Claw    { ... } /* Illegal, "Claw" already used */

"Short names" -- names minus the parcel prefix -- will be auto-generated for
all class symbols.  When there is no danger of namespace collision, typically
because no third-party non-system libraries are being pound-included, the
short names can be used after a USE_SHORT_NAMES directive:

    #define BOIL_USE_SHORT_NAMES

The USE_SHORT_NAMES directives do not affect class prefixes, only parcel
prefixes.

    /* No short names. */
    crust_Lobster *lobster = crust_Lobster_new();
    
    /* With short names. */
    #define CRUST_USE_SHORT_NAMES
    Lobster *lobster = Lobster_new();

=head2 Inclusion

The boilerplate code is written to a file with whose name is the same as the
.bp file, but with an extension of ".h".  C code should pound-include 
"Boiler/Util/Foo.h" for a class defined in "Boiler/Util/Foo.bp".

=head1 COPYRIGHT AND LICENSE

    /**
     * Copyright 2009 The Apache Software Foundation
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
     * implied.  See the License for the specific language governing
     * permissions and limitations under the License.
     */

=cut

