/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* Source fragment for Lucy's charmonizer.c.
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "Charmonizer/Probe.h"
#include "Charmonizer/Probe/Integers.h"

static void
S_add_compiler_flags(struct chaz_CLIArgs *args) {
    if (chaz_Probe_gcc_version_num()) {
        if (getenv("LUCY_VALGRIND")) {
            chaz_CC_add_extra_cflags("-fno-inline-functions");
        }
        else if (getenv("LUCY_DEBUG")) {
            chaz_CC_add_extra_cflags(
                "-DLUCY_DEBUG -pedantic -Wall -Wextra "
                "-Wno-variadic-macros "
            );
        }

        /* Tell GCC explicitly to run with maximum options. */
        chaz_CC_add_extra_cflags("-std=gnu99 -D_GNU_SOURCE");
    }
    else if (chaz_Probe_msvc_version_num()) {
        /* Compile as C++ under MSVC. */
        chaz_CC_add_extra_cflags("/TP");

        /* Thwart stupid warnings. */
        chaz_CC_add_extra_cflags("/D_CRT_SECURE_NO_WARNINGS");
        chaz_CC_add_extra_cflags("/D_SCL_SECURE_NO_WARNINGS");

        if (chaz_Probe_msvc_version_num() < 1300) {
            /* Redefine 'for' to fix broken 'for' scoping under MSVC6. */
            chaz_CC_add_extra_cflags("/Dfor=\"if(0);else for\"");
        }
    }
}

int main(int argc, const char **argv) {
    /* Initialize. */
    {
        struct chaz_CLIArgs args;
        int result = chaz_Probe_parse_cli_args(argc, argv, &args);
        if (!result) {
            chaz_Probe_die_usage();
        }
        chaz_Probe_init(&args);
        S_add_compiler_flags(&args);
    }

    /* Run probe modules. */
    chaz_BuildEnv_run();
    chaz_DirManip_run();
    chaz_Headers_run();
    chaz_Integers_run();
    chaz_Strings_run();

    /* Clean up. */
    chaz_Probe_clean_up();

    return 0;
}


